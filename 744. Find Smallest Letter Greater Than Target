Problem Statement:
You are given an array of characters letters that is sorted in non-decreasing order, and a character target. There are at least two different characters in letters.
Return the smallest character in letters that is lexicographically greater than target. If such a character does not exist, return the first character in letters.
Solution:
Brute force:
class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        for (char c : letters) {
            if (c > target) {
                return c;
            }
        }
        // if no character greater, wrap around
        return letters[0];
    }
}
optimal (Using binary search):
class Solution {
    public char nextGreatestLetter(char[] letters, char target) {
        int n=letters.length;
        int low=0;
        int high=n-1;
        while(low<=high){
            int mid=low+(high-low)/2;
            if(letters[mid] > target){              
                high=mid-1;
            }else{    //here we had covered equalto and less than both value low will return the ans you can dry run it we use modulus function because 
                       because for the largest element in the arr less than target than return first elemt 
                low=mid-1;
            }
        }
        return letters[low%n]; 
    }
}
